// <auto-generated />
using System;
using KlinikOtomasyon.Data.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KlinikOtomasyon.Data.Migrations
{
    [DbContext(typeof(KlinikOtomasyonContext))]
    [Migration("20230110154031_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Clinics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 778, DateTimeKind.Local).AddTicks(8640),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 778, DateTimeKind.Local).AddTicks(8640),
                            Name = "Trioklinik",
                            Note = "İlk klinik. FluentAPI ile oluşturulmuştur."
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1360),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1370),
                            Name = "Hemşire",
                            Note = "İlk Hemşire Departmanı. FluentAPI ile oluşturulmuştur."
                        },
                        new
                        {
                            Id = 2,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1370),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1370),
                            Name = "Satış",
                            Note = "İlk Satış Departmanı. FluentAPI ile oluşturulmuştur."
                        },
                        new
                        {
                            Id = 3,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1380),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1380),
                            Name = "Tercüman",
                            Note = "İlk Tercüman Departmanı. FluentAPI ile oluşturulmuştur."
                        },
                        new
                        {
                            Id = 4,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1390),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1390),
                            Name = "Masaj",
                            Note = "İlk Masaj Departmanı. FluentAPI ile oluşturulmuştur."
                        },
                        new
                        {
                            Id = 5,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1390),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1400),
                            Name = "Hekim",
                            Note = "İlk Hekim Departmanı. FluentAPI ile oluşturulmuştur."
                        },
                        new
                        {
                            Id = 6,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1400),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(1400),
                            Name = "Yönetim",
                            Note = "İlk Yönetim Departmanı. FluentAPI ile oluşturulmuştur."
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Massage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("WherePerformed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Massages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(6660),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(6660),
                            Note = "İlk Masaj. FluentAPI ile oluşturulmuştur.",
                            PatientId = 1,
                            WherePerformed = "Otel"
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.MassageEmployee", b =>
                {
                    b.Property<int>("MassageId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MassageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MassagesEmployees", (string)null);

                    b.HasData(
                        new
                        {
                            MassageId = 1,
                            UserId = 4
                        },
                        new
                        {
                            MassageId = 1,
                            UserId = 1
                        },
                        new
                        {
                            MassageId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("ComingFrom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HowFindUs")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            ComingFrom = "Avustralya",
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(9050),
                            HowFindUs = "Instagram",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 779, DateTimeKind.Local).AddTicks(9050),
                            Name = "Fake",
                            Note = "İlk Hasta. FluentAPI ile oluşturulmuştur.",
                            Surname = "Patient"
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("WhatFor")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(1530),
                            Currency = "Euro",
                            IsActive = true,
                            IsCash = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(1540),
                            Note = "İlk Ödeme. FluentAPI ile oluşturulmuştur.",
                            PatientId = 1,
                            Price = 3500,
                            WhatFor = "Ameliyat"
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.PerformedSurgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Epicrisis")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("GivenFatAmount")
                        .HasColumnType("int");

                    b.Property<int>("ImplantSize")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("SurgeryId")
                        .HasColumnType("int");

                    b.Property<int>("TakenFatAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("PerformedSurgeries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(5990),
                            Epicrisis = "...",
                            GivenFatAmount = 800,
                            ImplantSize = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(5990),
                            Note = "İlk Yapılan Ameliyat. FluentAPI ile oluşturulmuştur.",
                            PatientId = 1,
                            SurgeryId = 1,
                            TakenFatAmount = 2500
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PriceAmount")
                        .HasColumnType("int");

                    b.Property<string>("PriceOf")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(7250),
                            Currency = "Euro",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(7250),
                            Note = "İlk fiyat. FluentAPI ile oluşturulmuştur.",
                            PriceAmount = 80,
                            PriceOf = "Hotel 1 Kişilik Standart Oda"
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "60403a2a-b007-4da1-9f1d-5c618f84bd01",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e9baa8a9-b50e-4ed0-884b-73b42627d623",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "89b4b413-a6b0-469e-a00c-4027ea617ef7",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "c4c958df-deba-439f-9642-c20447a51728",
                            Name = "Sales",
                            NormalizedName = "SALES"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "ce76b33b-ea08-4f76-a2f5-dc6e1f24c597",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "a3af6a75-99cf-4c22-b6da-ca80fb71351d",
                            Name = "Masseuse",
                            NormalizedName = "MASSEUSE"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "4a5e08bf-05b6-4ae3-bf14-aec40ba6c29f",
                            Name = "Translator",
                            NormalizedName = "TRANSLATOR"
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Surgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalDay")
                        .HasColumnType("int");

                    b.Property<int>("HospitalPrice")
                        .HasColumnType("int");

                    b.Property<string>("HospitalPriceCurrency")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("HotelDay")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExtra")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("SurgeryPrice")
                        .HasColumnType("int");

                    b.Property<string>("SurgeryPriceCurrency")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Surgeries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9800),
                            HospitalDay = 2,
                            HospitalPrice = 1000,
                            HospitalPriceCurrency = "Euro",
                            HotelDay = 4,
                            IsActive = true,
                            IsDeleted = false,
                            IsExtra = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9800),
                            Name = "BBL (Brazilian Butt Lift)",
                            Note = "Örnek Ameliyat. FluentAPI ile oluşturulmuştur.",
                            SurgeryPrice = 2440,
                            SurgeryPriceCurrency = "Euro"
                        },
                        new
                        {
                            Id = 2,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9800),
                            HospitalDay = 2,
                            HospitalPrice = 1100,
                            HospitalPriceCurrency = "Euro",
                            HotelDay = 5,
                            IsActive = true,
                            IsDeleted = false,
                            IsExtra = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9810),
                            Name = "Rhinoplasty",
                            Note = "Örnek Ameliyat. FluentAPI ile oluşturulmuştur.",
                            SurgeryPrice = 2310,
                            SurgeryPriceCurrency = "Euro"
                        },
                        new
                        {
                            Id = 3,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9810),
                            HospitalDay = 1,
                            HospitalPrice = 920,
                            HospitalPriceCurrency = "Euro",
                            HotelDay = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsExtra = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9820),
                            Name = "Chin Implant",
                            Note = "Örnek Ameliyat. FluentAPI ile oluşturulmuştur.",
                            SurgeryPrice = 2050,
                            SurgeryPriceCurrency = "Euro"
                        },
                        new
                        {
                            Id = 4,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9820),
                            HospitalDay = 2,
                            HospitalPrice = 2000,
                            HospitalPriceCurrency = "Euro",
                            HotelDay = 5,
                            IsActive = true,
                            IsDeleted = false,
                            IsExtra = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9820),
                            Name = "Facelift",
                            Note = "Örnek Ameliyat. FluentAPI ile oluşturulmuştur.",
                            SurgeryPrice = 2810,
                            SurgeryPriceCurrency = "Euro"
                        },
                        new
                        {
                            Id = 5,
                            ClinicId = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9830),
                            HospitalDay = 0,
                            HospitalPrice = 0,
                            HospitalPriceCurrency = "Euro",
                            HotelDay = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsExtra = true,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 780, DateTimeKind.Local).AddTicks(9830),
                            Name = "Kol Ekstra Bölge",
                            Note = "Örnek Ameliyat. FluentAPI ile oluşturulmuştur.",
                            SurgeryPrice = 300,
                            SurgeryPriceCurrency = "Euro"
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5aa693e9-60cf-4a0d-ae80-4661fa0f514c",
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 784, DateTimeKind.Local).AddTicks(7380),
                            DepartmentId = 3,
                            Email = "metearslan@deneme.com",
                            EmailConfirmed = true,
                            IdentityNumber = "12345678912",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 784, DateTimeKind.Local).AddTicks(7380),
                            Name = "Mete",
                            NormalizedEmail = "metearslan@deneme.com",
                            NormalizedUserName = "MARSLAN",
                            Note = "İlk tercüman. FluentAPI ile oluşturulmuştur.",
                            PasswordHash = "AQAAAAEAACcQAAAAEBrL2BgKNcQNEb0FTebpM/+ZqI6qTapOHF/vjtRwPlfFZRF3kpAAsRfyuuiOOZ9zBQ==",
                            PhoneNumber = "905344236576",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Arslan",
                            TwoFactorEnabled = false,
                            UserName = "marslan"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39e24d5f-6f13-4899-8e5c-998a39339328",
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 787, DateTimeKind.Local).AddTicks(5400),
                            DepartmentId = 1,
                            Email = "nurcanozmen@deneme.com",
                            EmailConfirmed = true,
                            IdentityNumber = "12345678912",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 787, DateTimeKind.Local).AddTicks(5400),
                            Name = "Nurcan",
                            NormalizedEmail = "nurcanozmen@deneme.com",
                            NormalizedUserName = "NOZMEN",
                            Note = "İlk hemşire. FluentAPI ile oluşturulmuştur.",
                            PasswordHash = "AQAAAAEAACcQAAAAEFvZ8Y4LnmXfzYISfDxF82uXvL1DJSWDhjlXA7PnXg2veB/Tq9TvT4Mf9IJ+LGX1SQ==",
                            PhoneNumber = "905344236597",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Özmen",
                            TwoFactorEnabled = false,
                            UserName = "nozmen"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73b1e0d1-17ad-4ee4-a9fd-7508fd5b5bfe",
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 790, DateTimeKind.Local).AddTicks(3450),
                            DepartmentId = 2,
                            Email = "karinsarkli@deneme.com",
                            EmailConfirmed = true,
                            IdentityNumber = "12345678912",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 790, DateTimeKind.Local).AddTicks(3450),
                            Name = "Karin",
                            NormalizedEmail = "karinsarkli@deneme.com",
                            NormalizedUserName = "KSARKLI",
                            Note = "İlk satış elemanı. FluentAPI ile oluşturulmuştur.",
                            PasswordHash = "AQAAAAEAACcQAAAAEJyOw2QofB575oEnpAIF5ocWTMnkU2HvfcZ+b4nOD0wyOW94yESGXuCx2dSdUpEEpw==",
                            PhoneNumber = "905344236598",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Şarklı",
                            TwoFactorEnabled = false,
                            UserName = "ksarkli"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db7a6c60-fa7b-49ff-b597-1ec8d8c33889",
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 793, DateTimeKind.Local).AddTicks(1840),
                            DepartmentId = 4,
                            Email = "betulkucukozen@deneme.com",
                            EmailConfirmed = true,
                            IdentityNumber = "12345678912",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 793, DateTimeKind.Local).AddTicks(1850),
                            Name = "Betül",
                            NormalizedEmail = "betulkucukozen@deneme.com",
                            NormalizedUserName = "BKUCUKOZEN",
                            Note = "İlk masaj elemanı. FluentAPI ile oluşturulmuştur.",
                            PasswordHash = "AQAAAAEAACcQAAAAEMAV0p1DscaIkjZsPkfvy8IYRaQ4aWwePQ0XRoHijjX7FEXkwiH483pP482ZpuuvOg==",
                            PhoneNumber = "905344236599",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Küçüközen",
                            TwoFactorEnabled = false,
                            UserName = "bkucukozen"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12b9efb6-3220-40c2-a49c-a71a3e424b79",
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 795, DateTimeKind.Local).AddTicks(9950),
                            DepartmentId = 5,
                            Email = "cagdasorman@deneme.com",
                            EmailConfirmed = true,
                            IdentityNumber = "12345678912",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 795, DateTimeKind.Local).AddTicks(9950),
                            Name = "Çağdaş",
                            NormalizedEmail = "cagdasorman@deneme.com",
                            NormalizedUserName = "CORMAN",
                            Note = "İlk hekim. FluentAPI ile oluşturulmuştur.",
                            PasswordHash = "AQAAAAEAACcQAAAAEPzbLjEFPXVCkxMERCz5vqwU0vzDS8frX75iKn+Xqjc9wDFk2YsV3RDgyjFYeBNoXg==",
                            PhoneNumber = "905344236595",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Orman",
                            TwoFactorEnabled = false,
                            UserName = "corman"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc6a8ea1-129a-4697-b1ed-0a6644e7a604",
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 798, DateTimeKind.Local).AddTicks(8020),
                            DepartmentId = 6,
                            Email = "kemalogulcanozsicak@deneme.com",
                            EmailConfirmed = true,
                            IdentityNumber = "12345678912",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 798, DateTimeKind.Local).AddTicks(8020),
                            Name = "Kemal Oğulcan",
                            NormalizedEmail = "kemalogulcanozsicak@deneme.com",
                            NormalizedUserName = "KOOZSICAK",
                            Note = "İlk yönetici. FluentAPI ile oluşturulmuştur.",
                            PasswordHash = "AQAAAAEAACcQAAAAECQJA1xKmzi+9di4YTRqlcnGXcSKPunO4v74F7Bf8dJNRKzzqX4Vg2TCmmWmyFQM+g==",
                            PhoneNumber = "905344236594",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Özsıcak",
                            TwoFactorEnabled = false,
                            UserName = "koozsicak"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a27c982-c50c-4a5b-a9c2-b623eca8cd9d",
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 1, 10, 18, 40, 30, 801, DateTimeKind.Local).AddTicks(6260),
                            DepartmentId = 6,
                            Email = "mertcanaslan@deneme.com",
                            EmailConfirmed = true,
                            IdentityNumber = "12345678912",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 1, 10, 18, 40, 30, 801, DateTimeKind.Local).AddTicks(6260),
                            Name = "Mertcan",
                            NormalizedEmail = "mertcanaslan@deneme.com",
                            NormalizedUserName = "MASLAN",
                            Note = "İlk yönetici. FluentAPI ile oluşturulmuştur.",
                            PasswordHash = "AQAAAAEAACcQAAAAEMlgLYnwClPxP8u9R2dsd5sS/OzUxpZHHnmLRlx5ihYq7uzp4kcS6rzjLqI2FvtpYQ==",
                            PhoneNumber = "905344236594",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Aslan",
                            TwoFactorEnabled = false,
                            UserName = "maslan"
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Department", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Clinic", "Clinic")
                        .WithMany("Deparments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Massage", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Patient", "Patient")
                        .WithMany("Massages")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.MassageEmployee", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Massage", "Massage")
                        .WithMany("Employees")
                        .HasForeignKey("MassageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KlinikOtomasyon.Entities.Concrete.User", "User")
                        .WithMany("Massages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Massage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Patient", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Clinic", "Clinic")
                        .WithMany("Patients")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Patient", "Patient")
                        .WithMany("Payments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.PerformedSurgery", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Clinic", "Clinic")
                        .WithMany("PerformedSurgeries")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Patient", "Patient")
                        .WithMany("Surgeries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Surgery", "Surgery")
                        .WithMany()
                        .HasForeignKey("SurgeryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Clinic");

                    b.Navigation("Patient");

                    b.Navigation("Surgery");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Surgery", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Clinic", "Clinic")
                        .WithMany("Surgeries")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.User", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KlinikOtomasyon.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("KlinikOtomasyon.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Clinic", b =>
                {
                    b.Navigation("Deparments");

                    b.Navigation("Patients");

                    b.Navigation("PerformedSurgeries");

                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Massage", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.Patient", b =>
                {
                    b.Navigation("Massages");

                    b.Navigation("Payments");

                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("KlinikOtomasyon.Entities.Concrete.User", b =>
                {
                    b.Navigation("Massages");
                });
#pragma warning restore 612, 618
        }
    }
}
